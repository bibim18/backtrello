{"version":3,"sources":["../src/index.js"],"names":["yupConfig","target","key","descriptor","query","body","params","validate","ctx","next","isValid","validateQuery","request","validateBody","validateParams","ValidationError","oldDescriptor","value","errorCode","VALIDATION","CODE","STATUS","BaseError","message","name","constructor","Error","errors","data","code","status"],"mappings":";;;;;;kBA0Be,UAASA,SAAT,EAAoB;AAAA;;AAC/B,WAAO,UAACC,MAAD,EAASC,GAAT,EAAcC,UAAd,EAA6B;AAAA,YACxBC,KADwB,GACAJ,SADA,CACxBI,KADwB;AAAA,YACjBC,IADiB,GACAL,SADA,CACjBK,IADiB;AAAA,YACXC,MADW,GACAN,SADA,CACXM,MADW;;AAEhC,YAAMC;AAAA,+EAAW,iBAAOC,GAAP,EAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCACUL,KADV;AAAA;AAAA;AAAA;;AAAA;AAAA,uCAC0BA,MAAMM,OAAN,CAAcF,IAAIJ,KAAlB,CAD1B;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,8CACsD,IADtD;;AAAA;AACPO,6CADO;;AAAA,qCAESN,IAFT;AAAA;AAAA;AAAA;;AAAA;AAAA,uCAEwBA,KAAKK,OAAL,CAAaF,IAAII,OAAJ,CAAYP,IAAzB,CAFxB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,8CAE0D,IAF1D;;AAAA;AAEPQ,4CAFO;;AAAA,qCAGWP,MAHX;AAAA;AAAA;AAAA;;AAAA;AAAA,uCAG4BA,OAAOI,OAAP,CAAeF,IAAIF,MAAnB,CAH5B;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,8CAG0D,IAH1D;;AAAA;AAGPQ,8CAHO;;AAAA,sCAITH,iBAAiBE,YAAjB,IAAiCC,cAJxB;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,sCAMH,IAAIC,eAAJ,CAAoB,2BAApB,EAAiD;AACnDJ,gEADmD;AAEnDE,8DAFmD;AAGnDC;AAHmD,iCAAjD,CANG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAX;;AAAA;AAAA;AAAA;AAAA,WAAN;AAaA,YAAIE,gBAAgBb,WAAWc,KAA/B;AACAd,mBAAWc,KAAX,2DAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCACTV,oDADS;;AAAA;AAAA;AAAA,mCAETS,sCAFS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAnB;AAIA,eAAOb,UAAP;AACH,KArBD;AAsBH,C;;;;;;;;;;AAjDD,IAAMe,YAAY;AACdC,gBAAY;AACVC,cAAM,YADI;AAEVC,gBAAQ;AAFE;AADE,CAAlB;;IAOMC,S;;;AACF,uBAAaC,OAAb,EAAsB;AAAA;;AAAA,0HACdA,OADc;;AAEpB,cAAKC,IAAL,GAAY,MAAKC,WAAL,CAAiBD,IAA7B;AACA,cAAKD,OAAL,GAAeA,OAAf;AAHoB;AAIrB;;;EALmBG,K;;IAQlBX,e;;;AACF,6BAAaQ,OAAb,EAAsBI,MAAtB,EAA8BC,IAA9B,EAA4G;AAAA,YAAxEC,IAAwE,uEAAjEX,UAAUC,UAAV,CAAqBC,IAA4C;AAAA,YAAtCU,MAAsC,uEAA7BZ,UAAUC,UAAV,CAAqBE,MAAQ;;AAAA;;AAAA,uIACpGE,OADoG;;AAE1G,eAAKC,IAAL,GAAY,iBAAZ;AACA,eAAKM,MAAL,GAAc,GAAd;AACA,eAAKD,IAAL,GAAYA,IAAZ;AACA,eAAKD,IAAL,GAAYA,IAAZ;AACA,eAAKD,MAAL,GAAcA,MAAd;AAN0G;AAO3G;;;EARyBL,S","file":"index.js","sourcesContent":["const errorCode = {\n    VALIDATION: {\n      CODE: 'VALIDATION',\n      STATUS: 400,\n    }\n  }\n\nclass BaseError extends Error {\n    constructor (message) {\n      super(message)\n      this.name = this.constructor.name\n      this.message = message\n    }\n  }\n  \nclass ValidationError extends BaseError {\n    constructor (message, errors, data, code = errorCode.VALIDATION.CODE, status = errorCode.VALIDATION.STATUS) {\n      super(message)\n      this.name = 'ValidationError'\n      this.status = 400\n      this.code = code\n      this.data = data\n      this.errors = errors\n    }\n  }\n\nexport default function(yupConfig) {\n    return (target, key, descriptor) => {\n        const { query, body, params } = yupConfig\n        const validate = async (ctx, next) => {\n            const validateQuery = (query) ? (await query.isValid(ctx.query)) : true\n            const validateBody = (body) ? (await body.isValid(ctx.request.body)) : true\n            const validateParams = (params) ? (await params.isValid(ctx.params)) : true\n            if (validateQuery && validateBody && validateParams) {\n            } else {\n                throw new ValidationError('User Input Validate Error', {\n                    validateQuery,\n                    validateBody,\n                    validateParams,\n                })\n            }\n        }\n        let oldDescriptor = descriptor.value\n        descriptor.value = async function(...args) {\n            await validate(args[0])\n            await oldDescriptor(...args)\n        }\n        return descriptor\n    }\n}"]}